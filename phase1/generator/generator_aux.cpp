#include "generator_aux.h"
#include <iostream>

void createSphere(float radius, float slices, float stacks, std::string filename) {

}

void createBox(float units, float grid, std::string filename) {

}

void createCone(float radius, float height, float slices, float stacks, std::string filename){

}

void createPlane(float units, int divisions, std::string filename){

    int triangle_nmr_max = divisions * divisions * 2; // For each slice in the grid generated by the number of divisions we have 2 slices;

    int sizeArray = 100;
    int triangle_nmr = 0;

    float halfx = 0, halfz = 0, halfx_temp = 0, halfz_temp = 0, aux_x1 = 0, aux_z1 = 0, aux_x2 = 0, aux_z2 = 0;
    halfx = halfz = units / 2;
    halfx_temp = halfz_temp = units / divisions;

    Vertex *v1, *v2, *v3, *v4;
    Triangle *triangles = (Triangle *) malloc(sizeArray * sizeof(Triangle));

    std::ofstream file_handler;
    file_handler.open(filename);
    file_handler << "Number of triangles in the grid: " << triangle_nmr_max << std::endl;

    for (int i = 0; -halfx + i + halfx_temp < halfx; i++) {
        for (int j = 0; -halfz + j + halfz_temp < halfz; j++) {
            aux_x1 = -halfx + (i * halfx_temp);
            aux_z1 = -halfz + (j * halfz_temp);
            aux_x2 = -halfx + ((i + 1) * halfx_temp);
            aux_z2 = -halfz + ((j + 1) * halfz_temp);

            v1 = new Vertex(aux_x1, 0 , aux_z2);
            v2 = new Vertex(aux_x1,0,aux_z1);
            v3 = new Vertex(aux_x2, 0 , aux_z1);
            v4 = new Vertex(aux_x2, 0 ,aux_z2);

            if(triangle_nmr == sizeArray) {
                sizeArray *= 2;
                triangles = (Triangle *) realloc(triangles, sizeArray * sizeof(Triangle));
            }

            Triangle *t1, *t2;

            t1 = new Triangle(v1,v2,v3);
            t2 = new Triangle(v1, v3, v4);

            triangles[triangle_nmr] = t1;
            triangles[triangle_nmr + 1] = t2;
            triangle_nmr += 2;
        }
    }

    for(triangle_nmr = 0; triangle_nmr < triangle_nmr_max; triangle_nmr++) {
        std::string info = triangleToString(triangles[triangle_nmr]);
        file_handler << info;
    }
    free(triangles);
    file_handler.close();
}

std::string vertexToString(Vertex v){
    std::string vertex_info = std::to_string(v.x) + "," + std::to_string(v.y) + "," + std::to_string(v.z);
    return vertex_info;
}

std::string triangleToString(Triangle t){
    Vertex v1 = t.v1;
    Vertex v2 = t.v2;
    Vertex v3 = t.v3;

    std::string triangle_info = "|Triangle|" + vertexToString(v1) + "|$$|" +vertexToString(v2) + "|$$|" +vertexToString(v3) + "|$$|" + "|EOT|" + "\n"; // EOT == End Of Triangle
    return triangle_info;
}